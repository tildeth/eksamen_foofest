1. Indlæsningsanimationer (Loading States)
Når du henter data eller venter på en handling, som f.eks. at hente bands i BandsPage eller campingpladser i Camping, kan du bruge Framer Motion til at vise en smidig animation under indlæsning. Dette kan være en simpel fade-in eller en animeret spinner.

import { motion } from "framer-motion";

const BandsPage = () => {
  const [bands, setBands] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const loadBands = async () => {
      const data = await fetchBands();
      setBands(data);
      setLoading(false);
    };
    loadBands();
  }, []);

  if (loading) {
    return (
      <motion.div
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ duration: 1 }}
      >
        <div>Loading bands...</div>
      </motion.div>
    );
  }

  return (
    <section>
      <h2>All Bands</h2>
      {bands.map((band) => (
        <BandItem key={band.slug} band={band} />
      ))}
    </section>
  );
};


2. Animere ændringer i UI (f.eks. når du ændrer billetter i Billet)
Framer Motion kan bruges til at animere, når der sker ændringer i UI-elementer, som når brugeren ændrer antallet af billetter (f.eks. ved at trykke på plus- eller minus-knappen).
import { motion } from "framer-motion";

const Billet = () => {
  const [regular, setRegular] = useState(0);
  const [vip, setVip] = useState(0);

  const increaseRegular = () => setRegular(regular + 1);
  const decreaseRegular = () => setRegular(regular > 0 ? regular - 1 : 0);

  const increaseVip = () => setVip(vip + 1);
  const decreaseVip = () => setVip(vip > 0 ? vip - 1 : 0);

  return (
    <section>
      <h1>Vælg billetter</h1>
      <div>
        <label>
          Standard (799,-)
          <motion.button
            type="button"
            onClick={decreaseRegular}
            whileTap={{ scale: 0.9 }}
          >
            -
          </motion.button>
          <motion.span
            key={regular}
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ duration: 0.3 }}
          >
            {regular}
          </motion.span>
          <motion.button
            type="button"
            onClick={increaseRegular}
            whileTap={{ scale: 0.9 }}
          >
            +
          </motion.button>
        </label>
      </div>
      <div>
        <label>
          VIP (1299,-)
          <motion.button
            type="button"
            onClick={decreaseVip}
            whileTap={{ scale: 0.9 }}
          >
            -
          </motion.button>
          <motion.span
            key={vip}
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ duration: 0.3 }}
          >
            {vip}
          </motion.span>
          <motion.button
            type="button"
            onClick={increaseVip}
            whileTap={{ scale: 0.9 }}
          >
            +
          </motion.button>
        </label>
      </div>
    </section>
  );
};

3. Tidsplan (SchedulePage)
Når du viser tidsplanen, kan Framer Motion bruges til at gøre komponenten interaktiv og flydende. For eksempel kan du animere indlæsningen af tidspunkterne, når de først vises, eller animering ved at klikke på en tid for at få flere oplysninger.
import { motion } from "framer-motion";
import ScheduleItem from "@/components/ScheduleItem";

const Schedule = () => {
  const schedule = [
    { time: "12:00", event: "FooBand Live" },
    { time: "14:00", event: "DJ Set" },
    { time: "16:00", event: "FooTalks" },
    // ...
  ];

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 1 }}
    >
      {schedule.map((item, index) => (
        <motion.div
          key={index}
          initial={{ y: 20, opacity: 0 }}
          animate={{ y: 0, opacity: 1 }}
          transition={{ duration: 0.5, delay: index * 0.2 }}
        >
          <ScheduleItem time={item.time} event={item.event} />
        </motion.div>
      ))}
    </motion.div>
  );
};


4. Dialoger (Confirmation or Booking Form)
Du kan bruge Framer Motion til at tilføje animationer til modal-vinduer, pop-ups eller bekræftelsesbeskeder, der vises efter en handling. Dette kan være en smidig måde at gøre brugeren opmærksom på bekræftelsen eller nødvendige næste skridt.

import { motion } from "framer-motion";

const Confirmation = () => {
  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0 }}
      transition={{ duration: 0.5 }}
    >
      <h1>Bekræftelse</h1>
      <p>Tak for din booking!</p>
    </motion.div>
  );
};

5. Buttons and Hover Effects
For at tilføje ekstra finesse til dine knapper, kan du bruge Framer Motion til at animere knapperne ved hover, click eller focus. Dette giver dem et ekstra lag af interaktivitet, som kan forbedre brugeroplevelsen.
import { motion } from "framer-motion";

const Button = ({ children, onClick }) => {
  return (
    <motion.button
      onClick={onClick}
      whileHover={{ scale: 1.1, backgroundColor: "#ff1b7f" }}
      whileTap={{ scale: 0.95 }}
      transition={{ type: "spring", stiffness: 300 }}
    >
      {children}
    </motion.button>
  );
};


6. Animation af Udvidede Informationer i Camping
Når en bruger vælger en campingplads eller et telt, kan du tilføje en animation, som afslører ekstra information. Dette kan være en fade-in eller slide-up effekt.
import { motion } from "framer-motion";

const CampingDetails = ({ areaDetails }) => {
  return (
    <motion.div
      initial={{ y: 20, opacity: 0 }}
      animate={{ y: 0, opacity: 1 }}
      transition={{ duration: 0.5 }}
    >
      <h3>{areaDetails.name}</h3>
      <p>{areaDetails.description}</p>
    </motion.div>
  );
};

